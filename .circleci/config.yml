version: 2.1
executors:
    python-executor:
        docker:
            - image: circleci/python:3.8
    docker-executor:
        docker:
            - image: docker:17.05.0-ce-git
        working_directory: ~/sms-gateway
    node-executor:
        docker:
            - image: circleci/node:10
        working_directory: ~/sms-gateway

jobs:
    dependencies:
        executor: python-executor
        steps:
            - checkout
            - restore_cache:
                key: smsgateway-{{ checksum "Pipfile.lock" }}-{{ .Branch }}
                keys:
                    - E-{{ checksum "Pipfile.lock" }}

            - run:
                name: Upgrade pip
                command: sudo pip install --upgrade pip

            - run:
                name: Download pipenv
                command: pip install pipenv

            - run:
                name: lock dependencies
                command: pipenv lock -r > requirements.txt

            - run:
                name: lock dev dependencies
                command: pipenv lock -r -d > requirements_dev.txt

            - run:
                name: Install dependencies
                command: sudo pip install -r requirements.txt

            - save_cache:
                key: smsgateway-{{ checksum "Pipfile.lock" }}-{{ .Branch }}
                paths: ~/.venv/
                keys:
                    - E-{{ checksum "Pipfile.lock" }}

            - persist_to_workspace:
                root: .
                paths: .

    test:
        executor: python-executor
        steps:
            - attach_workspace:
                at: .

            - restore_cache:
                key: smsgateway-{{ checksum "Pipfile.lock" }}-{{ .Branch }}
                keys:
                    - E-{{ checksum "Pipfile.lock" }}

            - run:
                name: Install dependencies
                command: |
                    sudo pip install -r requirements.txt
                    sudo pip install -r requirements_dev.txt
                    pipenv install

            - run:
                name: Run unit tests and coverage
                command: |
                    export FLASK_ENV=testing
                    pytest --cov=app tests/
                    coverage html

            - persist_to_workspace:
                root: .
                paths: .

    build_docker_image:
        executor: docker-executor
        steps:
            - setup_remote_docker
            - attach_workspace:
                at: .

            - run:
                name: Build application Docker image
                command: |
                    docker build -t garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) .
            - run:
                name: Save application Docker image
                command: |
                    docker save -o sms-gateway-image.tar garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7)

            - persist_to_workspace:
                root: .
                paths: .

    push_latest:
        executor: docker-executor
        steps:
            - setup_remote_docker
            - attach_workspace:
                at: .

            - run:
                name: Load application Docker image
                command: |
                    docker load --input sms-gateway-image.tar

            - run:
               name: Tag Latest docker image
               command: |
                   docker tag garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) garihublimited/sms-gateway:latest
                   docker tag garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) garihublimited/sms-gateway:latest-$(echo $CIRCLE_SHA1 | cut -c0-7)
            - run:
                name: Push application Docker image
                command: |
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker push garihublimited/sms-gateway:latest
                    docker push garihublimited/sms-gateway:latest-$(echo $CIRCLE_SHA1 | cut -c0-7)

    push_alpha:
        executor: docker-executor
        steps:
            - setup_remote_docker
            - attach_workspace:
                at: .

            - run:
                name: Load application Docker image
                command: |
                    docker load --input sms-gateway-image.tar

            - run:
               name: Tag Alpha docker image
               command: |
                   docker tag garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) garihublimited/sms-gateway:alpha
                   docker tag garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) garihublimited/sms-gateway:alpha-$(echo $CIRCLE_SHA1 | cut -c0-7)

            - run:
                name: Push application Docker image
                command: |
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker push garihublimited/sms-gateway:alpha
                    docker push garihublimited/sms-gateway:alpha-$(echo $CIRCLE_SHA1 | cut -c0-7)

    push_beta:
        executor: docker-executor
        steps:
            - setup_remote_docker
            - attach_workspace:
                at: .

            - run:
                name: Load application Docker image
                command: |
                    docker load --input sms-gateway-image.tar

            - run:
                name: Tag Beta docker image
                command: |
                    docker tag garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) garihublimited/sms-gateway:beta
                    docker tag garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) garihublimited/sms-gateway:beta-$(echo $CIRCLE_SHA1 | cut -c0-7)

            - run:
                name: Push application Docker image
                command: |
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker push garihublimited/sms-gateway:beta
                    docker push garihublimited/sms-gateway:beta-$(echo $CIRCLE_SHA1 | cut -c0-7)

    push_rc:
        executor: docker-executor
        steps:
            - setup_remote_docker
            - attach_workspace:
                at: .

            - run:
                name: Load application Docker image
                command: |
                    docker load --input sms-gateway-image.tar

            - run:
                name: Tag RC docker image
                command: |
                    docker tag garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) garihublimited/sms-gateway:rc
                    docker tag garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) garihublimited/sms-gateway:rc-$(echo $CIRCLE_SHA1 | cut -c0-7)

            - run:
                name: Push application Docker image
                command: |
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker push garihublimited/sms-gateway:rc
                    docker push garihublimited/sms-gateway:rc-$(echo $CIRCLE_SHA1 | cut -c0-7)

    push_production:
        executor: docker-executor
        steps:
            - setup_remote_docker
            - attach_workspace:
                at: .

            - run:
                name: Load application Docker image
                command: |
                    docker load --input sms-gateway-image.tar

            - run:
                name: Tag production docker image
                command: |
                    docker tag garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) garihublimited/sms-gateway:production
                    docker tag garihublimited/sms-gateway:$(echo $CIRCLE_SHA1 | cut -c0-7) garihublimited/sms-gateway:production-$(echo $CIRCLE_SHA1 | cut -c0-7)

            - run:
                name: Push application Docker image
                command: |
                    docker login -u $DOCKER_USER -p $DOCKER_PASS
                    docker push garihublimited/sms-gateway:production
                    docker push garihublimited/sms-gateway:production-$(echo $CIRCLE_SHA1 | cut -c0-7)

    publish_release:
        executor: node-executor
        steps:
            - attach_workspace:
                  at: .

            - run:
                name: Publish release
                command: npx semantic-release

workflows:
  version: 2
  test_build_push_tag:
    jobs:
    - dependencies

    - test:
        requires:
        - dependencies

    - build_docker_image:
        filters:
          branches:
            only:
            - alpha
            - beta
            - rc
            - production
            - develop
        requires:
        - test

    - push_latest:
        context: garihub-context
        filters:
          branches:
            only:
            - develop
        requires:
        - build_docker_image

    - push_alpha:
        context: garihub-context
        filters:
          branches:
            only:
            - alpha
        requires:
        - build_docker_image

    - push_beta:
        context: garihub-context
        filters:
          branches:
            only:
            - beta
        requires:
        - build_docker_image

    - push_rc:
        context: garihub-context
        filters:
          branches:
            only:
            - rc
        requires:
        - build_docker_image

    - push_production:
        context: garihub-context
        filters:
          branches:
            only:
            - production
        requires:
        - build_docker_image

    - publish_release:
          context: garihub-context
          requires:
              - push_alpha
              - push_beta
              - push_rc
              - push_production
          filters:
              branches:
                  only:
                      - production
                      - rc
                      - beta
                      - alpha
