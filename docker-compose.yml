version: '3.7'

services:
    db:
        image: postgres:13.4
        hostname: ujumbedb
        container_name: ujumbe-db
        profiles:
            - database
        ports:
            - "${DATABASE_PORT:-5432}:5432"
        environment:
            POSTGRES_PASSWORD: password
            POSTGRES_USER: ujumbe
            POSTGRES_DB: ujumbedb
        volumes:
            - postgres-db:/var/lib/postgresql/data

    #    flower:
    #        image: mher/flower:latest
    #        container_name: ujumbe-flower-dashboard
    #        hostname: flower
    #        environment:
    #            - CELERY_BROKER_URL=amqp://
    #        ports:
    #            - 5555:5555

    zookeeper:
        image: confluentinc/cp-zookeeper:7.3.0
        hostname: ujumbe-zookeeper
        container_name: ujumbe-zookeeper
        profiles:
            - kafka
        networks:
            - kafka-network
        healthcheck:
            test: echo stat | nc localhost 2181
            interval: 10s
            timeout: 10s
            retries: 3
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
            ZOOKEEPER_SERVER_ID: 1
            ZOOKEEPER_INIT_LIMIT: 5
            ZOOKEEPER_SYNC_LIMIT: 2
            ZOOKEEPER_SERVERS: ujumbe-zookeeper:2888:3888
        ports:
            - "2181:2181"

    kafka-broker1:
        image: confluentinc/cp-kafka:7.1.0
        container_name: ujumbe-kafka-broker1
        hostname: ujumbe-kafka-broker1
        profiles:
            - kafka
        networks:
            - kafka-network
        healthcheck:
            test: ps augwwx | egrep [S]upportedKafka
        ports:
            # To learn about configuring Kafka for access across networks see
            # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
            - "9091:9091"
            - "29091:29091"
            - "9999:9999"
        depends_on:
            - zookeeper
        volumes:
            - kafka-broker1:/var/lib/kafka/data
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'ujumbe-zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://ujumbe-kafka-broker1:19091,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091,DOCKER://host.docker.internal:29091
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
            JMX_PORT: 9999

    kafka-broker2:
        image: confluentinc/cp-kafka:7.1.0
        container_name: ujumbe-kafka-broker2
        hostname: ujumbe-kafka-broker2
        profiles:
            - kafka
        networks:
            - kafka-network
        healthcheck:
            test: ps augwwx | egrep [S]upportedKafka
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
            - "29092:29092"
        volumes:
            - kafka-broker2:/var/lib/kafka/data
        environment:
            KAFKA_BROKER_ID: 2
            KAFKA_ZOOKEEPER_CONNECT: ujumbe-zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://ujumbe-kafka-broker2:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

    kafka-broker3:
        image: confluentinc/cp-kafka:7.1.0
        container_name: ujumbe-kafka-broker3
        hostname: ujumbe-kafka-broker3
        profiles:
            - kafka
        networks:
            - kafka-network
        healthcheck:
            test: ps augwwx | egrep [S]upportedKafka
        depends_on:
            - zookeeper
        ports:
            - "9093:9093"
            - "29093:29093"
        volumes:
            - kafka-broker3:/var/lib/kafka/data
        environment:
            KAFKA_BROKER_ID: 3
            KAFKA_ZOOKEEPER_CONNECT: ujumbe-zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: INTERNAL://ujumbe-kafka-broker3:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
            KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

    kafka-schema-registry:
        image: confluentinc/cp-schema-registry:7.1.0
        hostname: ujumbe-kafka-schema-registry
        container_name: ujumbe-kafka-schema-registry
        profiles:
            - kafka
        networks:
            - kafka-network
        depends_on:
            - zookeeper
            - kafka-broker1
            - kafka-broker2
            - kafka-broker3
        ports:
            - "8081:8081"
        environment:
            SCHEMA_REGISTRY_HOST_NAME: ujumbe-kafka-schema-registry
            SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'ujumbe-kafka-broker1:29091'
            SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

    kafka-ui:
        image: provectuslabs/kafka-ui:latest
        container_name: ujumbe-kafka-ui
        profiles:
            - kafka
        environment:
            KAFKA_CLUSTERS_0_NAME: ujumbe-kafka-cluster
            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ujumbe-kafka-broker1:29091
            KAFKA_CLUSTERS_0_JMXPORT: 9999
            KAFKA_CLUSTERS_0_SCHEMAREGISTRY: "http://ujumbe-kafka-schema-registry:8081"
        depends_on:
            - zookeeper
            - kafka-broker1
            - kafka-broker2
            - kafka-broker3
        ports:
            - "9001:8080"
        networks:
            - kafka-network

    # The zipkin process services the UI, and also exposes a POST endpoint that
    # instrumentation can send trace data to. Scribe is disabled by default.
    # Zipkin: http://localhost:9411
    zipkin:
        image: openzipkin/zipkin:2.23
        container_name: ujumbe-zipkin
        profiles:
            - kafka
        ports:
            # Port used for the Zipkin UI and HTTP Api
            - "9411:9411"
        environment:
            JAVA_OPTS: "-Xms1024m -Xmx2048m -XX:+ExitOnOutOfMemoryError"
        networks:
            - kafka-network

    # https://hub.docker.com/r/grafana/grafana
    # http://localhost:3000
    grafana:
        image: grafana/grafana:9.2.1
        container_name: seshat-grafana
        environment:
            GF_USERS_ALLOW_SIGN_UP: "false"
            GF_AUTH_DISABLE_LOGIN_FORM: "true"
            GF_AUTH_ANONYMOUS_ENABLED: "true"
            GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
        ports:
            - "3000:3000"
        profiles:
            - monitoring
        networks:
            - monitoring
        volumes:
            - ${PWD}/docker/monitoring/grafana/provisioning/datasources/grafana-datasource.yml:/etc/grafana/provisioning/datasources/grafana-datasource.yml
            - ${PWD}/docker/monitoring/grafana/provisioning/dashboards/grafana-dashboard.yml:/etc/grafana/provisioning/dashboards/grafana-dashboard.yml
            - ${PWD}/docker/monitoring/grafana/dashboards:/etc/grafana/dashboards
        depends_on:
            - prometheus

    # https://hub.docker.com/r/prom/prometheus
    # http://localhost:9090
    prometheus:
        image: prom/prometheus:v2.39.1
        container_name: seshat-prometheus
        profiles:
            - monitoring
        networks:
            - monitoring
        ports:
            - "9090:9090"
        extra_hosts:
            - "host.docker.internal:host-gateway"
        volumes:
            - ${PWD}/docker/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

volumes:
    postgres-db:
    kafka-broker1:
    kafka-broker2:
    kafka-broker3:

networks:
    kafka-network:
        driver: bridge
    monitoring:
        driver: bridge
